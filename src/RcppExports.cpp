// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// r_cmb
arma::vec r_cmb(unsigned int n, unsigned int m, double p, double nu);
RcppExport SEXP _COMMultReg_r_cmb(SEXP nSEXP, SEXP mSEXP, SEXP pSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(r_cmb(n, m, p, nu));
    return rcpp_result_gen;
END_RCPP
}
// d_cmb
double d_cmb(unsigned int x, unsigned int m, double p, double nu, bool take_log, bool normalize);
RcppExport SEXP _COMMultReg_d_cmb(SEXP xSEXP, SEXP mSEXP, SEXP pSEXP, SEXP nuSEXP, SEXP take_logSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(d_cmb(x, m, p, nu, take_log, normalize));
    return rcpp_result_gen;
END_RCPP
}
// normconst_cmb
double normconst_cmb(unsigned int m, double p, double nu, bool take_log);
RcppExport SEXP _COMMultReg_normconst_cmb(SEXP mSEXP, SEXP pSEXP, SEXP nuSEXP, SEXP take_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    rcpp_result_gen = Rcpp::wrap(normconst_cmb(m, p, nu, take_log));
    return rcpp_result_gen;
END_RCPP
}
// d_cmb_sample
arma::vec d_cmb_sample(const arma::vec& x, const arma::vec& m, const arma::vec& p, const arma::vec& nu, bool take_log);
RcppExport SEXP _COMMultReg_d_cmb_sample(SEXP xSEXP, SEXP mSEXP, SEXP pSEXP, SEXP nuSEXP, SEXP take_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    rcpp_result_gen = Rcpp::wrap(d_cmb_sample(x, m, p, nu, take_log));
    return rcpp_result_gen;
END_RCPP
}
// gunterize
Rcpp::List gunterize(const arma::umat& X, bool all);
RcppExport SEXP _COMMultReg_gunterize(SEXP XSEXP, SEXP allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type all(allSEXP);
    rcpp_result_gen = Rcpp::wrap(gunterize(X, all));
    return rcpp_result_gen;
END_RCPP
}
// loglik_score_fim_cmm
Rcpp::List loglik_score_fim_cmm(const Rcpp::List& par, const Rcpp::List& dat_xform, unsigned int baseline);
RcppExport SEXP _COMMultReg_loglik_score_fim_cmm(SEXP parSEXP, SEXP dat_xformSEXP, SEXP baselineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type dat_xform(dat_xformSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type baseline(baselineSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_score_fim_cmm(par, dat_xform, baseline));
    return rcpp_result_gen;
END_RCPP
}
// r_cmm_internal
arma::mat r_cmm_internal(unsigned int n, unsigned int m, const arma::vec& p, double nu, unsigned int burn, unsigned int thin, const arma::vec& x_init, unsigned int report_period);
RcppExport SEXP _COMMultReg_r_cmm_internal(SEXP nSEXP, SEXP mSEXP, SEXP pSEXP, SEXP nuSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP x_initSEXP, SEXP report_periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_init(x_initSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type report_period(report_periodSEXP);
    rcpp_result_gen = Rcpp::wrap(r_cmm_internal(n, m, p, nu, burn, thin, x_init, report_period));
    return rcpp_result_gen;
END_RCPP
}
// d_cmm
double d_cmm(const arma::vec& x, const arma::vec& p, double nu, bool take_log, bool normalize);
RcppExport SEXP _COMMultReg_d_cmm(SEXP xSEXP, SEXP pSEXP, SEXP nuSEXP, SEXP take_logSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(d_cmm(x, p, nu, take_log, normalize));
    return rcpp_result_gen;
END_RCPP
}
// normconst_cmm
double normconst_cmm(unsigned int m, const arma::vec& p, double nu, bool take_log);
RcppExport SEXP _COMMultReg_normconst_cmm(SEXP mSEXP, SEXP pSEXP, SEXP nuSEXP, SEXP take_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    rcpp_result_gen = Rcpp::wrap(normconst_cmm(m, p, nu, take_log));
    return rcpp_result_gen;
END_RCPP
}
// d_cmm_sample
arma::vec d_cmm_sample(const arma::mat& X, const arma::mat& P, const arma::vec& nu, bool take_log, bool normalize);
RcppExport SEXP _COMMultReg_d_cmm_sample(SEXP XSEXP, SEXP PSEXP, SEXP nuSEXP, SEXP take_logSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(d_cmm_sample(X, P, nu, take_log, normalize));
    return rcpp_result_gen;
END_RCPP
}
// pinv
arma::mat pinv(const arma::mat& x);
RcppExport SEXP _COMMultReg_pinv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pinv(x));
    return rcpp_result_gen;
END_RCPP
}
// logchoose
double logchoose(const arma::vec& x);
RcppExport SEXP _COMMultReg_logchoose(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logchoose(x));
    return rcpp_result_gen;
END_RCPP
}
// normalize
arma::vec normalize(const arma::vec& x, bool na_rm);
RcppExport SEXP _COMMultReg_normalize(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_COMMultReg_r_cmb", (DL_FUNC) &_COMMultReg_r_cmb, 4},
    {"_COMMultReg_d_cmb", (DL_FUNC) &_COMMultReg_d_cmb, 6},
    {"_COMMultReg_normconst_cmb", (DL_FUNC) &_COMMultReg_normconst_cmb, 4},
    {"_COMMultReg_d_cmb_sample", (DL_FUNC) &_COMMultReg_d_cmb_sample, 5},
    {"_COMMultReg_gunterize", (DL_FUNC) &_COMMultReg_gunterize, 2},
    {"_COMMultReg_loglik_score_fim_cmm", (DL_FUNC) &_COMMultReg_loglik_score_fim_cmm, 3},
    {"_COMMultReg_r_cmm_internal", (DL_FUNC) &_COMMultReg_r_cmm_internal, 8},
    {"_COMMultReg_d_cmm", (DL_FUNC) &_COMMultReg_d_cmm, 5},
    {"_COMMultReg_normconst_cmm", (DL_FUNC) &_COMMultReg_normconst_cmm, 4},
    {"_COMMultReg_d_cmm_sample", (DL_FUNC) &_COMMultReg_d_cmm_sample, 5},
    {"_COMMultReg_pinv", (DL_FUNC) &_COMMultReg_pinv, 1},
    {"_COMMultReg_logchoose", (DL_FUNC) &_COMMultReg_logchoose, 1},
    {"_COMMultReg_normalize", (DL_FUNC) &_COMMultReg_normalize, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_COMMultReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
