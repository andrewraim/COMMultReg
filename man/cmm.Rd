% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/cmm.R
\name{cmm}
\alias{cmm}
\alias{d_cmm}
\alias{normconst_cmm}
\alias{r_cmm}
\alias{e_cmm}
\alias{v_cmm}
\title{Conway Maxwell Multinomial distribution}
\usage{
d_cmm(x, p, nu, take_log = FALSE, normalize = TRUE)

normconst_cmm(m, p, nu, take_log = FALSE)

r_cmm(n, m, p, nu, burn = 0, thin = 1, x_init = NULL, report_period = NULL)

e_cmm(m, p, nu)

v_cmm(m, p, nu)
}
\arguments{
\item{x}{A eqn{k}-dimensional vector representing the outcome.}

\item{p}{Probability parameter; a vector of positive numbers which sums to 1.}

\item{nu}{Dispersion parameter.}

\item{take_log}{\code{TRUE} or \code{FALSE}; if \code{TRUE}, return
the value on the log-scale.}

\item{normalize}{\code{TRUE} or \code{FALSE}; if \code{FALSE}, do not
compute or apply the normalizing constant to each density value.}

\item{m}{Number of trials in the CMB cluster.}

\item{n}{Number of draws to produce.}

\item{burn}{Number of initial draws to burn for Gibbs sampler.}

\item{thin}{Thinning interval for Gibbs sampler. A value of \code{s} means
that \code{s} iterations of the sampler will be carried out before saving each
of the \code{n} requested draws.}

\item{x_init}{Initial value for Gibbs sampler. If \code{NULL}, it is set to
the extreme point \eqn{m \bm{e}_{\ell}} where \eqn{\ell = \textrm{argmax}_{j}\{p_j\}}.}

\item{report_period}{How often to output progress for Gibbs sampler. A value of
\code{s} means that a progress message will be printed every \code{s} iterations
of the sampler.}
}
\value{
The values returned by each function are:
\itemize{
\item \code{d_cmm}: the CMM density \eqn{f(\bm{x} \mid m, \bm{p}, \nu)},
where \eqn{m} is assumed to be \code{sum(x)}.
\item \code{r_cmm}: an \eqn{n \times k} matrix of draws.
\item \code{normconst_cmm}: a number representing the normalizing constant \eqn{C(m, \bm{p}, \nu)}.
\item \code{e_cmm}: a \eqn{k}-dimensional vector representing \eqn{\textrm{E}(\bm{X})}.
\item \code{v_cmm}: a \eqn{k \times k} matrix representing \eqn{\textrm{Var}(\bm{X})}
}
}
\description{
Functions for the \eqn{\textrm{CMM}_k(m, \bm{p}, \nu)} distribution.
}
\details{
Let \eqn{\Omega_{m,k}} denote the multinomial sample space based on \eqn{m} trials
and \eqn{k} categories. A random variable
\eqn{\bm{X} \sim \textrm{CMM}_k(m, \bm{p}, \nu)} has probability mass function
\deqn{
f(\bm{x} \mid m, \bm{p}, \nu) = C(m, \bm{p}, \nu)^{-1} {m \choose x_1 \cdots x_k}^\nu
p_1^{x_1} \cdots p_k^{x_k}, \quad \bm{x} \in \Omega_{m,k}
}
with
\deqn{
C(m, \bm{p}, \nu) = \sum_{\bm{x} \in \Omega_{m,k}}
{m \choose x_1 \cdots x_k}^\nu
p_1^{x_1} \cdots p_k^{x_k}
}
as the normalizing constant.

This package computes CMM density values in C++ to improve the performance of iterating
over the sample space. A Gibbs sampler is used to draw samples from CMM. Further details
can be found in Morris, Raim, and Sellers (2020+).
}
\examples{
set.seed(1234)
m = 10
p = c(0.1,0.1,0.8)
nu = 0.8

x = r_cmm(100, m, p, nu, burn = 1000, thin = 10)
d_cmm(x[1,], p, nu, take_log = TRUE)
normconst_cmm(m, p, nu, take_log = TRUE)
e_cmm(m, p, nu)
v_cmm(m, p, nu)

}
